import { Resend } from 'resend'
import redis from '@/config/redis'
import prisma from '@/config/database'
import env from '@/config/environment'

interface EmailTemplate {
  id: string
  name: string
  subject: string
  htmlContent: string
  textContent?: string
  variables: string[]
  category: EmailCategory
}

interface EmailJob {
  id: string
  to: string
  templateId: string
  variables: Record<string, any>
  scheduledFor?: Date
  priority: 'low' | 'normal' | 'high'
  category: EmailCategory
  userId?: string
}

interface EmailAnalytics {
  sent: number
  delivered: number
  opened: number
  clicked: number
  bounced: number
  complained: number
  unsubscribed: number
}

type EmailCategory = 'welcome' | 'newsletter' | 'notification' | 'premium' | 'system' | 'marketing'

export class EmailService {
  private readonly resend: Resend
  private readonly QUEUE_PREFIX = 'email_queue:'
  private readonly ANALYTICS_PREFIX = 'email_analytics:'
  
  constructor() {
    this.resend = new Resend(env.RESEND_API_KEY || 'test_key')
  }

  // Email Templates
  private readonly templates: Record<string, EmailTemplate> = {
    welcome: {
      id: 'welcome',
      name: 'Welcome Email',
      subject: '–î–æ–±—Ä–µ –¥–æ—à–ª–∏ –≤ FootballZone.bg! ‚öΩ',
      htmlContent: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%); padding: 40px 20px; text-align: center;">
            <h1 style="color: white; margin: 0; font-size: 28px;">–î–æ–±—Ä–µ –¥–æ—à–ª–∏ –≤ FootballZone.bg!</h1>
            <p style="color: #e0e7ff; margin: 10px 0 0 0; font-size: 16px;">–ë—ä–ª–≥–∞—Ä—Å–∫–∞—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∑–∞ —Ñ—É—Ç–±–æ–ª–Ω–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</p>
          </div>
          
          <div style="padding: 40px 20px;">
            <h2 style="color: #1e3a8a; margin-top: 0;">–ó–¥—Ä–∞–≤–µ–π {{userName}}!</h2>
            <p style="color: #374151; line-height: 1.6; font-size: 16px;">
              –†–∞–¥–≤–∞–º–µ —Å–µ, —á–µ —Å–µ –ø—Ä–∏—Å—ä–µ–¥–∏–Ω–∏ –∫—ä–º –Ω–∞—à–∞—Ç–∞ –æ–±—â–Ω–æ—Å—Ç –Ω–∞ —Ñ—É—Ç–±–æ–ª–Ω–∏—Ç–µ –µ–Ω—Ç—É—Å–∏–∞—Å—Ç–∏!
            </p>
            
            <div style="background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;">
              <h3 style="color: #1e3a8a; margin-top: 0;">–ö–∞–∫–≤–æ —Ç–µ –æ—á–∞–∫–≤–∞:</h3>
              <ul style="color: #374151; line-height: 1.6;">
                <li>üéØ –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏ –æ—Ç –ø—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–Ω–∏ —Ç—Ä–µ–Ω—å–æ—Ä–∏</li>
                <li>üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤—ä—á–Ω–∏ –ø—Ä–æ–≥—Ä–∞–º–∏ –∑–∞ –≤—Å–∏—á–∫–∏ –Ω–∏–≤–∞</li>
                <li>üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —Å—ä–≤–µ—Ç–∏ –∑–∞ —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–∏</li>
                <li>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</li>
                <li>üë• –ê–∫—Ç–∏–≤–Ω–∞ –æ–±—â–Ω–æ—Å—Ç –æ—Ç —Ñ—É—Ç–±–æ–ª–Ω–∏ –µ–∫—Å–ø–µ—Ä—Ç–∏</li>
              </ul>
            </div>
            
            <div style="text-align: center; margin: 30px 0;">
              <a href="{{dashboardUrl}}" style="display: inline-block; background: #1e3a8a; color: white; padding: 12px 30px; text-decoration: none; border-radius: 6px; font-weight: bold;">
                –ó–∞–ø–æ—á–Ω–∏ —Ä–∞–∑–≥–ª–µ–∂–¥–∞–Ω–µ—Ç–æ
              </a>
            </div>
            
            <p style="color: #6b7280; font-size: 14px; text-align: center; margin-top: 40px;">
              –ê–∫–æ –∏–º–∞—à –≤—ä–ø—Ä–æ—Å–∏, –Ω–µ —Å–µ –∫–æ–ª–µ–±–∞–π –¥–∞ <a href="mailto:support@footballzone.bg" style="color: #1e3a8a;">—Å–µ —Å–≤—ä—Ä–∂–µ—à —Å –Ω–∞—Å</a>.
            </p>
          </div>
        </div>
      `,
      textContent: `
        –î–æ–±—Ä–µ –¥–æ—à–ª–∏ –≤ FootballZone.bg!
        
        –ó–¥—Ä–∞–≤–µ–π {{userName}}!
        
        –†–∞–¥–≤–∞–º–µ —Å–µ, —á–µ —Å–µ –ø—Ä–∏—Å—ä–µ–¥–∏–Ω–∏ –∫—ä–º –Ω–∞—à–∞—Ç–∞ –æ–±—â–Ω–æ—Å—Ç –Ω–∞ —Ñ—É—Ç–±–æ–ª–Ω–∏—Ç–µ –µ–Ω—Ç—É—Å–∏–∞—Å—Ç–∏!
        
        –ö–∞–∫–≤–æ —Ç–µ –æ—á–∞–∫–≤–∞:
        - –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏ –æ—Ç –ø—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–Ω–∏ —Ç—Ä–µ–Ω—å–æ—Ä–∏
        - –¢—Ä–µ–Ω–∏—Ä–æ–≤—ä—á–Ω–∏ –ø—Ä–æ–≥—Ä–∞–º–∏ –∑–∞ –≤—Å–∏—á–∫–∏ –Ω–∏–≤–∞
        - –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —Å—ä–≤–µ—Ç–∏ –∑–∞ —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–∏
        - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        - –ê–∫—Ç–∏–≤–Ω–∞ –æ–±—â–Ω–æ—Å—Ç –æ—Ç —Ñ—É—Ç–±–æ–ª–Ω–∏ –µ–∫—Å–ø–µ—Ä—Ç–∏
        
        –ó–∞–ø–æ—á–Ω–∏ —Ä–∞–∑–≥–ª–µ–∂–¥–∞–Ω–µ—Ç–æ: {{dashboardUrl}}
        
        –ê–∫–æ –∏–º–∞—à –≤—ä–ø—Ä–æ—Å–∏, –ø–∏—à–∏ –Ω–∏ –Ω–∞: support@footballzone.bg
      `,
      variables: ['userName', 'dashboardUrl'],
      category: 'welcome'
    },

    new_article: {
      id: 'new_article',
      name: 'New Article Notification',
      subject: '–ù–æ–≤–∞ —Å—Ç–∞—Ç–∏—è: {{articleTitle}}',
      htmlContent: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background: #1e3a8a; padding: 20px; text-align: center;">
            <h1 style="color: white; margin: 0; font-size: 24px;">FootballZone.bg</h1>
          </div>
          
          <div style="padding: 30px 20px;">
            <h2 style="color: #1e3a8a; margin-top: 0;">–ù–æ–≤–∞ —Å—Ç–∞—Ç–∏—è –≤ {{categoryName}}</h2>
            
            <div style="border: 1px solid #e5e7eb; border-radius: 8px; overflow: hidden; margin: 20px 0;">
              {{#if articleImage}}
              <img src="{{articleImage}}" alt="{{articleTitle}}" style="width: 100%; height: 200px; object-fit: cover;">
              {{/if}}
              
              <div style="padding: 20px;">
                <h3 style="color: #111827; margin: 0 0 10px 0;">{{articleTitle}}</h3>
                <p style="color: #6b7280; margin: 0 0 15px 0;">{{articleExcerpt}}</p>
                
                <div style="display: flex; justify-content: space-between; align-items: center; color: #9ca3af; font-size: 14px;">
                  <span>–æ—Ç {{authorName}}</span>
                  <span>{{readTime}} –º–∏–Ω —á–µ—Ç–µ–Ω–µ</span>
                </div>
              </div>
            </div>
            
            <div style="text-align: center; margin: 30px 0;">
              <a href="{{articleUrl}}" style="display: inline-block; background: #1e3a8a; color: white; padding: 12px 30px; text-decoration: none; border-radius: 6px; font-weight: bold;">
                –ü—Ä–æ—á–µ—Ç–∏ —Å—Ç–∞—Ç–∏—è—Ç–∞
              </a>
            </div>
            
            <p style="color: #6b7280; font-size: 12px; text-align: center; margin-top: 40px;">
              –ú–æ–∂–µ—à –¥–∞ <a href="{{unsubscribeUrl}}" style="color: #1e3a8a;">—Å–µ –æ—Ç–ø–∏—à–µ—à</a> –æ—Ç —Ç–µ–∑–∏ –∏–∑–≤–µ—Å—Ç–∏—è –ø–æ –≤—Å—è–∫–æ –≤—Ä–µ–º–µ.
            </p>
          </div>
        </div>
      `,
      variables: ['articleTitle', 'categoryName', 'articleImage', 'articleExcerpt', 'authorName', 'readTime', 'articleUrl', 'unsubscribeUrl'],
      category: 'notification'
    },

    premium_released: {
      id: 'premium_released',
      name: 'Premium Content Released',
      subject: '–ë–µ–∑–ø–ª–∞—Ç–Ω–æ –¥–æ—Å—Ç—ä–ø–Ω–∞: {{articleTitle}}',
      htmlContent: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background: linear-gradient(135deg, #dc2626 0%, #ea580c 100%); padding: 30px 20px; text-align: center;">
            <h1 style="color: white; margin: 0; font-size: 24px;">üéâ –ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç–∏—è —Å–µ–≥–∞ –µ –±–µ–∑–ø–ª–∞—Ç–Ω–∞!</h1>
          </div>
          
          <div style="padding: 30px 20px;">
            <p style="color: #374151; font-size: 16px; line-height: 1.6;">
              –†–∞–¥–æ—Å—Ç–Ω–∞ –Ω–æ–≤–∏–Ω–∞! –°—Ç–∞—Ç–∏—è—Ç–∞, –∫–æ—è—Ç–æ —Å–∏ —á–∞–∫–∞–ª, —Å–µ–≥–∞ –µ –¥–æ—Å—Ç—ä–ø–Ω–∞ –±–µ–∑–ø–ª–∞—Ç–Ω–æ –∑–∞ –≤—Å–∏—á–∫–∏:
            </p>
            
            <div style="background: #fef2f2; border-left: 4px solid #dc2626; padding: 20px; margin: 20px 0;">
              <h3 style="color: #991b1b; margin: 0 0 10px 0;">{{articleTitle}}</h3>
              <p style="color: #7f1d1d; margin: 0;">{{articleExcerpt}}</p>
            </div>
            
            <div style="text-align: center; margin: 30px 0;">
              <a href="{{articleUrl}}" style="display: inline-block; background: #dc2626; color: white; padding: 12px 30px; text-decoration: none; border-radius: 6px; font-weight: bold;">
                –ü—Ä–æ—á–µ—Ç–∏ —Å–µ–≥–∞
              </a>
            </div>
            
            <div style="background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;">
              <h4 style="color: #1e3a8a; margin: 0 0 10px 0;">–ò—Å–∫–∞—à –ª–∏ –¥–æ—Å—Ç—ä–ø –¥–æ –≤—Å–∏—á–∫–∏ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç–∏–∏?</h4>
              <p style="color: #374151; margin: 0 0 15px 0; font-size: 14px;">
                –° –ø—Ä–µ–º–∏—É–º –∞–±–æ–Ω–∞–º–µ–Ω—Ç –ø–æ–ª—É—á–∞–≤–∞—à –Ω–µ–∑–∞–±–∞–≤–µ–Ω –¥–æ—Å—Ç—ä–ø –¥–æ –≤—Å–∏—á–∫–∏ –ø—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–Ω–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∏.
              </p>
              <a href="{{premiumUrl}}" style="color: #1e3a8a; font-weight: bold; text-decoration: none;">
                –†–∞–∑–≥–ª–µ–¥–∞–π –ø–ª–∞–Ω–æ–≤–µ—Ç–µ ‚Üí
              </a>
            </div>
          </div>
        </div>
      `,
      variables: ['articleTitle', 'articleExcerpt', 'articleUrl', 'premiumUrl'],
      category: 'premium'
    },

    series_completed: {
      id: 'series_completed',
      name: 'Series Completion',
      subject: '–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è! –ó–∞–≤—ä—Ä—à–∏ —Å–µ—Ä–∏—è—Ç–∞ "{{seriesName}}"',
      htmlContent: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background: linear-gradient(135deg, #059669 0%, #10b981 100%); padding: 40px 20px; text-align: center;">
            <h1 style="color: white; margin: 0; font-size: 28px;">üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è!</h1>
            <p style="color: #d1fae5; margin: 10px 0 0 0; font-size: 16px;">–ó–∞–≤—ä—Ä—à–∏ —Å–µ—Ä–∏—è—Ç–∞ —É—Å–ø–µ—à–Ω–æ</p>
          </div>
          
          <div style="padding: 40px 20px;">
            <h2 style="color: #059669; margin-top: 0;">"{{seriesName}}"</h2>
            <p style="color: #374151; font-size: 16px; line-height: 1.6;">
              –ë—Ä–∞–≤–æ, {{userName}}! –ó–∞–≤—ä—Ä—à–∏ –≤—Å–∏—á–∫–∏ {{articleCount}} —Å—Ç–∞—Ç–∏–∏ –æ—Ç —Ç–∞–∑–∏ —Å–µ—Ä–∏—è.
              –¢–æ–≤–∞ –ø–æ–∫–∞–∑–≤–∞ —Ç–≤–æ—è—Ç–∞ –æ—Ç–¥–∞–¥–µ–Ω–æ—Å—Ç –∫—ä–º —Ä–∞–∑–≤–∏—Ç–∏–µ—Ç–æ –≤ —Ñ—É—Ç–±–æ–ª–∞.
            </p>
            
            <div style="background: #f0fdf4; padding: 20px; border-radius: 8px; margin: 20px 0;">
              <h3 style="color: #059669; margin: 0 0 15px 0;">–¢–≤–æ–∏—Ç–µ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</h3>
              <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 15px;">
                <div style="text-align: center;">
                  <div style="font-size: 24px; font-weight: bold; color: #059669;">{{articleCount}}</div>
                  <div style="color: #065f46; font-size: 14px;">—Å—Ç–∞—Ç–∏–∏ –ø—Ä–æ—á–µ—Ç–µ–Ω–∏</div>
                </div>
                <div style="text-align: center;">
                  <div style="font-size: 24px; font-weight: bold; color: #059669;">{{totalReadTime}}</div>
                  <div style="color: #065f46; font-size: 14px;">–º–∏–Ω—É—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ</div>
                </div>
              </div>
            </div>
            
            {{#if recommendedSeries}}
            <h3 style="color: #1e3a8a;">–ü—Ä–µ–ø–æ—Ä—ä—á–∞–Ω–∏ —Å–ª–µ–¥–≤–∞—â–∏ —Å–µ—Ä–∏–∏:</h3>
            <div style="margin: 20px 0;">
              {{#each recommendedSeries}}
              <div style="border: 1px solid #e5e7eb; border-radius: 6px; padding: 15px; margin: 10px 0;">
                <h4 style="margin: 0 0 5px 0; color: #111827;">{{name}}</h4>
                <p style="margin: 0; color: #6b7280; font-size: 14px;">{{description}}</p>
              </div>
              {{/each}}
            </div>
            {{/if}}
            
            <div style="text-align: center; margin: 30px 0;">
              <a href="{{dashboardUrl}}" style="display: inline-block; background: #059669; color: white; padding: 12px 30px; text-decoration: none; border-radius: 6px; font-weight: bold;">
                –ü—Ä–æ–¥—ä–ª–∂–∏ –æ–±—É—á–µ–Ω–∏–µ—Ç–æ
              </a>
            </div>
          </div>
        </div>
      `,
      variables: ['seriesName', 'userName', 'articleCount', 'totalReadTime', 'recommendedSeries', 'dashboardUrl'],
      category: 'notification'
    },

    password_reset: {
      id: 'password_reset',
      name: 'Password Reset',
      subject: '–ù—É–ª–∏—Ä–∞–Ω–µ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞ –∑–∞ FootballZone.bg',
      htmlContent: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background: #1e3a8a; padding: 30px 20px; text-align: center;">
            <h1 style="color: white; margin: 0; font-size: 24px;">–ù—É–ª–∏—Ä–∞–Ω–µ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞</h1>
          </div>
          
          <div style="padding: 40px 20px;">
            <p style="color: #374151; font-size: 16px; line-height: 1.6;">
              –ü–æ–ª—É—á–∏—Ö–º–µ –∑–∞—è–≤–∫–∞ –∑–∞ –Ω—É–ª–∏—Ä–∞–Ω–µ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞ –∑–∞ —Ç–≤–æ—è –∞–∫–∞—É–Ω—Ç –≤ FootballZone.bg.
            </p>
            
            <div style="background: #fef3c7; border-left: 4px solid #f59e0b; padding: 20px; margin: 20px 0;">
              <p style="color: #92400e; margin: 0; font-weight: bold;">
                –ê–∫–æ –Ω–µ —Ç–∏ —Å–∏ –Ω–∞–ø—Ä–∞–≤–∏–ª —Ç–∞–∑–∏ –∑–∞—è–≤–∫–∞, –º–æ–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–∞–π —Ç–æ–∑–∏ –∏–º–µ–π–ª.
              </p>
            </div>
            
            <div style="text-align: center; margin: 30px 0;">
              <a href="{{resetUrl}}" style="display: inline-block; background: #1e3a8a; color: white; padding: 12px 30px; text-decoration: none; border-radius: 6px; font-weight: bold;">
                –ù—É–ª–∏—Ä–∞–π –ø–∞—Ä–æ–ª–∞—Ç–∞
              </a>
            </div>
            
            <p style="color: #6b7280; font-size: 14px; text-align: center;">
              –¢–æ–∑–∏ –ª–∏–Ω–∫ –µ –≤–∞–ª–∏–¥–µ–Ω –≤ –ø—Ä–æ–¥—ä–ª–∂–µ–Ω–∏–µ –Ω–∞ 1 —á–∞—Å.<br>
              –ê–∫–æ –Ω–µ –º–æ–∂–µ—à –¥–∞ –∫–ª–∏–∫–Ω–µ—à –≤—ä—Ä—Ö—É –±—É—Ç–æ–Ω–∞, –∫–æ–ø–∏—Ä–∞–π —Ç–æ–∑–∏ –ª–∏–Ω–∫:<br>
              <span style="word-break: break-all;">{{resetUrl}}</span>
            </p>
          </div>
        </div>
      `,
      variables: ['resetUrl'],
      category: 'system'
    }
  }

  // Send individual email
  async sendEmail(
    to: string, 
    templateId: string, 
    variables: Record<string, any> = {},
    options: {
      scheduledFor?: Date
      priority?: 'low' | 'normal' | 'high'
      userId?: string
    } = {}
  ): Promise<string> {
    const template = this.templates[templateId]
    if (!template) {
      throw new Error(`Template ${templateId} not found`)
    }

    // Check if user has unsubscribed from this category
    if (options.userId && await this.isUnsubscribed(options.userId, template.category)) {
      console.log(`User ${options.userId} is unsubscribed from ${template.category} emails`)
      return 'unsubscribed'
    }

    const emailJob: EmailJob = {
      id: `email_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      to,
      templateId,
      variables,
      scheduledFor: options.scheduledFor,
      priority: options.priority || 'normal',
      category: template.category,
      userId: options.userId
    }

    if (options.scheduledFor && options.scheduledFor > new Date()) {
      // Schedule for later
      await this.scheduleEmail(emailJob)
      return emailJob.id
    } else {
      // Send immediately
      return await this.processEmail(emailJob)
    }
  }

  // Send bulk emails (with rate limiting)
  async sendBulkEmails(
    recipients: Array<{
      email: string
      variables: Record<string, any>
      userId?: string
    }>,
    templateId: string,
    options: {
      batchSize?: number
      delayBetweenBatches?: number
      priority?: 'low' | 'normal' | 'high'
    } = {}
  ): Promise<{ sent: number; failed: number; errors: string[] }> {
    const batchSize = options.batchSize || 100
    const delay = options.delayBetweenBatches || 1000 // 1 second between batches
    const results = { sent: 0, failed: 0, errors: [] as string[] }

    // Process in batches to avoid rate limiting
    for (let i = 0; i < recipients.length; i += batchSize) {
      const batch = recipients.slice(i, i + batchSize)
      
      const batchPromises = batch.map(async recipient => {
        try {
          await this.sendEmail(recipient.email, templateId, recipient.variables, {
            priority: options.priority,
            userId: recipient.userId
          })
          results.sent++
        } catch (error) {
          results.failed++
          results.errors.push(`${recipient.email}: ${error}`)
        }
      })

      await Promise.all(batchPromises)

      // Delay between batches (except for the last batch)
      if (i + batchSize < recipients.length) {
        await new Promise(resolve => setTimeout(resolve, delay))
      }
    }

    return results
  }

  // Process scheduled emails (called by cron job)
  async processScheduledEmails(): Promise<{ processed: number; errors: string[] }> {
    const now = new Date()
    const errors: string[] = []
    let processed = 0

    try {
      // Get scheduled emails that are due
      const scheduledEmails = await redis.zrangebyscore(
        `${this.QUEUE_PREFIX}scheduled`,
        0,
        now.getTime(),
        'WITHSCORES',
        'LIMIT',
        0,
        100 // Process up to 100 at a time
      )

      for (let i = 0; i < scheduledEmails.length; i += 2) {
        const emailData = scheduledEmails[i]
        const score = scheduledEmails[i + 1]

        try {
          const emailJob: EmailJob = JSON.parse(emailData)
          await this.processEmail(emailJob)
          
          // Remove from scheduled queue
          await redis.zrem(`${this.QUEUE_PREFIX}scheduled`, emailData)
          processed++
          
        } catch (error) {
          errors.push(`Failed to process scheduled email: ${error}`)
          console.error('Scheduled email processing error:', error)
        }
      }

    } catch (error) {
      errors.push(`Failed to fetch scheduled emails: ${error}`)
      console.error('Scheduled emails fetch error:', error)
    }

    return { processed, errors }
  }

  // Get email analytics
  async getEmailAnalytics(
    category?: EmailCategory,
    startDate?: Date,
    endDate?: Date
  ): Promise<EmailAnalytics & { byCategory: Record<EmailCategory, EmailAnalytics> }> {
    const dateKey = startDate && endDate ? 
      `:${startDate.toISOString().split('T')[0]}_${endDate.toISOString().split('T')[0]}` : 
      ''
    
    const getStats = async (cat?: string) => {
      const key = `${this.ANALYTICS_PREFIX}${cat || 'total'}${dateKey}`
      const stats = await redis.hmget(
        key,
        'sent', 'delivered', 'opened', 'clicked', 'bounced', 'complained', 'unsubscribed'
      )

      return {
        sent: parseInt(stats[0] || '0'),
        delivered: parseInt(stats[1] || '0'),
        opened: parseInt(stats[2] || '0'),
        clicked: parseInt(stats[3] || '0'),
        bounced: parseInt(stats[4] || '0'),
        complained: parseInt(stats[5] || '0'),
        unsubscribed: parseInt(stats[6] || '0')
      }
    }

    const totalStats = await getStats(category)
    
    // Get stats by category
    const categories: EmailCategory[] = ['welcome', 'newsletter', 'notification', 'premium', 'system', 'marketing']
    const byCategory: Record<EmailCategory, EmailAnalytics> = {} as any

    for (const cat of categories) {
      byCategory[cat] = await getStats(cat)
    }

    return {
      ...totalStats,
      byCategory
    }
  }

  // Manage user email preferences
  async updateEmailPreferences(
    userId: string,
    preferences: {
      newsletter?: boolean
      notifications?: boolean
      premium?: boolean
      marketing?: boolean
    }
  ): Promise<void> {
    await prisma.user.update({
      where: { id: userId },
      data: {
        emailNotifications: preferences.notifications ?? true
      }
    })

    // Store detailed preferences in Redis
    const prefKey = `email_preferences:${userId}`
    await redis.hmset(prefKey, {
      newsletter: preferences.newsletter ? '1' : '0',
      notifications: preferences.notifications ? '1' : '0',
      premium: preferences.premium ? '1' : '0',
      marketing: preferences.marketing ? '1' : '0',
      updated_at: new Date().toISOString()
    })

    await redis.expire(prefKey, 30 * 24 * 60 * 60) // 30 days
  }

  // Unsubscribe user from specific category
  async unsubscribe(userId: string, category: EmailCategory): Promise<void> {
    const unsubKey = `unsubscribed:${userId}`
    await redis.sadd(unsubKey, category)
    await redis.expire(unsubKey, 365 * 24 * 60 * 60) // 1 year

    // Track unsubscribe analytics
    await this.trackEmailEvent('unsubscribed', category)
  }

  // Check if user is unsubscribed
  async isUnsubscribed(userId: string, category: EmailCategory): Promise<boolean> {
    const unsubKey = `unsubscribed:${userId}`
    return await redis.sismember(unsubKey, category) === 1
  }

  // Get email templates
  getTemplates(): EmailTemplate[] {
    return Object.values(this.templates)
  }

  // Update email template
  updateTemplate(templateId: string, updates: Partial<EmailTemplate>): void {
    if (this.templates[templateId]) {
      this.templates[templateId] = { ...this.templates[templateId], ...updates }
    }
  }

  // Private helper methods
  private async scheduleEmail(emailJob: EmailJob): Promise<void> {
    const scheduleTime = emailJob.scheduledFor!.getTime()
    await redis.zadd(`${this.QUEUE_PREFIX}scheduled`, scheduleTime, JSON.stringify(emailJob))
  }

  private async processEmail(emailJob: EmailJob): Promise<string> {
    const template = this.templates[emailJob.templateId]
    const subject = this.renderTemplate(template.subject, emailJob.variables)
    const htmlContent = this.renderTemplate(template.htmlContent, emailJob.variables)
    const textContent = template.textContent ? this.renderTemplate(template.textContent, emailJob.variables) : undefined

    try {
      // Add unsubscribe link if not system email
      const unsubscribeUrl = emailJob.userId && emailJob.category !== 'system' ?
        `${env.FRONTEND_URL}/unsubscribe?token=${this.generateUnsubscribeToken(emailJob.userId, emailJob.category)}` :
        undefined

      const finalVariables = { ...emailJob.variables, unsubscribeUrl }
      const finalHtml = this.renderTemplate(htmlContent, finalVariables)
      const finalText = textContent ? this.renderTemplate(textContent, finalVariables) : undefined

      const emailData = {
        from: env.FROM_EMAIL || 'FootballZone.bg <noreply@footballzone.bg>',
        to: emailJob.to,
        subject,
        html: finalHtml,
        text: finalText,
        headers: {
          'List-Unsubscribe': unsubscribeUrl ? `<${unsubscribeUrl}>` : undefined
        }
      }

      const { data, error } = await this.resend.emails.send(emailData)
      
      if (error) {
        throw new Error(`Resend error: ${JSON.stringify(error)}`)
      }

      // Track analytics
      await this.trackEmailEvent('sent', emailJob.category)
      
      console.log(`Email sent successfully: ${emailJob.id} to ${emailJob.to}`)
      return data?.id || emailJob.id

    } catch (error) {
      console.error(`Failed to send email ${emailJob.id}:`, error)
      throw error
    }
  }

  private renderTemplate(template: string, variables: Record<string, any>): string {
    let rendered = template

    // Simple variable substitution ({{variable}})
    Object.entries(variables).forEach(([key, value]) => {
      const regex = new RegExp(`{{${key}}}`, 'g')
      rendered = rendered.replace(regex, String(value || ''))
    })

    // Handle conditional blocks ({{#if condition}})
    rendered = rendered.replace(/{{#if\s+(\w+)}}([\s\S]*?){{\/if}}/g, (match, condition, content) => {
      return variables[condition] ? content : ''
    })

    // Handle loops ({{#each array}})
    rendered = rendered.replace(/{{#each\s+(\w+)}}([\s\S]*?){{\/each}}/g, (match, arrayName, content) => {
      const array = variables[arrayName]
      if (Array.isArray(array)) {
        return array.map(item => {
          let itemContent = content
          Object.entries(item).forEach(([key, value]) => {
            const regex = new RegExp(`{{${key}}}`, 'g')
            itemContent = itemContent.replace(regex, String(value || ''))
          })
          return itemContent
        }).join('')
      }
      return ''
    })

    return rendered
  }

  private async trackEmailEvent(event: string, category: EmailCategory): Promise<void> {
    const today = new Date().toISOString().split('T')[0]
    const keys = [
      `${this.ANALYTICS_PREFIX}total:${today}`,
      `${this.ANALYTICS_PREFIX}${category}:${today}`,
      `${this.ANALYTICS_PREFIX}total`,
      `${this.ANALYTICS_PREFIX}${category}`
    ]

    for (const key of keys) {
      await redis.hincrby(key, event, 1)
      await redis.expire(key, 90 * 24 * 60 * 60) // 90 days
    }
  }

  private generateUnsubscribeToken(userId: string, category: EmailCategory): string {
    const jwt = require('jsonwebtoken')
    return jwt.sign(
      { userId, category, type: 'unsubscribe' },
      env.JWT_SECRET || 'fallback_secret',
      { expiresIn: '30d' }
    )
  }
}

export const emailService = new EmailService()

// Process scheduled emails every minute
if (env.NODE_ENV !== 'test') {
  setInterval(async () => {
    try {
      const results = await emailService.processScheduledEmails()
      if (results.processed > 0) {
        console.log(`Processed ${results.processed} scheduled emails`)
      }
      if (results.errors.length > 0) {
        console.error('Scheduled email errors:', results.errors)
      }
    } catch (error) {
      console.error('Scheduled email processing failed:', error)
    }
  }, 60 * 1000) // Every minute
}