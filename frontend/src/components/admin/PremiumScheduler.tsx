'use client'

import { useState } from 'react'
import { CalendarIcon, ClockIcon, LockClosedIcon, LockOpenIcon } from '@heroicons/react/24/outline'
import { formatDateBG } from '@/utils/dateUtils'

interface PremiumSchedulerProps {
  isPremium: boolean
  premiumSchedule?: {
    releaseFree: Date
    isPermanentPremium: boolean
  }
  onPremiumChange: (isPremium: boolean) => void
  onScheduleChange: (schedule?: {
    releaseFree: Date
    isPermanentPremium: boolean
  }) => void
  className?: string
}

export default function PremiumScheduler({
  isPremium,
  premiumSchedule,
  onPremiumChange,
  onScheduleChange,
  className = ''
}: PremiumSchedulerProps) {
  const [scheduleType, setScheduleType] = useState<'immediate' | 'scheduled' | 'permanent'>(
    premiumSchedule?.isPermanentPremium ? 'permanent' :
    premiumSchedule?.releaseFree ? 'scheduled' : 'immediate'
  )
  
  const [releaseDate, setReleaseDate] = useState(
    premiumSchedule?.releaseFree?.toISOString().split('T')[0] || ''
  )
  
  const [releaseTime, setReleaseTime] = useState(
    premiumSchedule?.releaseFree?.toTimeString().split(' ')[0].slice(0, 5) || '09:00'
  )

  const handleScheduleTypeChange = (type: 'immediate' | 'scheduled' | 'permanent') => {
    setScheduleType(type)
    
    if (type === 'immediate') {
      onPremiumChange(false)
      onScheduleChange(undefined)
    } else if (type === 'permanent') {
      onPremiumChange(true)
      onScheduleChange({
        releaseFree: new Date('9999-12-31'),
        isPermanentPremium: true
      })
    } else {
      onPremiumChange(true)
      // Schedule will be set when date/time is updated
    }
  }

  const handleDateTimeChange = () => {
    if (scheduleType === 'scheduled' && releaseDate) {
      const releaseDatetime = new Date(`${releaseDate}T${releaseTime}`)
      onScheduleChange({
        releaseFree: releaseDatetime,
        isPermanentPremium: false
      })
    }
  }


  const getStatusColor = () => {
    if (!isPremium) return 'text-green-600'
    if (scheduleType === 'permanent') return 'text-purple-600'
    if (scheduleType === 'scheduled') return 'text-orange-600'
    return 'text-blue-600'
  }

  const getStatusIcon = () => {
    if (!isPremium) return <LockOpenIcon className="w-5 h-5" />
    return <LockClosedIcon className="w-5 h-5" />
  }

  const getStatusText = () => {
    if (!isPremium) return '–ë–µ–∑–ø–ª–∞—Ç–Ω–∞ —Å—Ç–∞—Ç–∏—è'
    if (scheduleType === 'permanent') return '–ó–∞–≤–∏–Ω–∞–≥–∏ –ø—Ä–µ–º–∏—É–º'
    if (scheduleType === 'scheduled' && releaseDate) {
      const releaseDateTime = new Date(`${releaseDate}T${releaseTime}`)
      return `–ü—Ä–µ–º–∏—É–º –¥–æ ${formatDateBG(releaseDateTime)}`
    }
    return '–ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç–∏—è'
  }

  return (
    <div className={`space-y-6 ${className}`}>
      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-2">
          –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—ä–ø
        </h3>
        <p className="text-sm text-gray-600">
          –û–ø—Ä–µ–¥–µ–ª–µ—Ç–µ –∫–æ–≥–∞ –∏ –∫–∞–∫ —Å—Ç–∞—Ç–∏—è—Ç–∞ —â–µ –±—ä–¥–µ –¥–æ—Å—Ç—ä–ø–Ω–∞
        </p>
      </div>

      {/* Current status */}
      <div className={`p-4 rounded-lg border-2 border-dashed ${
        isPremium ? 'border-orange-300 bg-orange-50' : 'border-green-300 bg-green-50'
      }`}>
        <div className="flex items-center space-x-3">
          <div className={getStatusColor()}>
            {getStatusIcon()}
          </div>
          <div>
            <h4 className={`font-semibold ${getStatusColor()}`}>
              {getStatusText()}
            </h4>
            {scheduleType === 'scheduled' && releaseDate && (
              <p className="text-sm text-gray-600">
                –°—Ç–∞—Ç–∏—è—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —â–µ —Å—Ç–∞–Ω–µ –±–µ–∑–ø–ª–∞—Ç–Ω–∞ –≤ –∑–∞–¥–∞–¥–µ–Ω–∏—è –º–æ–º–µ–Ω—Ç
              </p>
            )}
          </div>
        </div>
      </div>

      {/* Schedule options */}
      <div className="space-y-4">
        <h4 className="font-medium text-gray-900">–ò–∑–±–µ—Ä–µ—Ç–µ –ø–ª–∞–Ω –∑–∞ –¥–æ—Å—Ç—ä–ø:</h4>
        
        <div className="space-y-3">
          {/* Immediate free */}
          <label className="flex items-start space-x-3 p-4 border rounded-lg cursor-pointer hover:bg-gray-50 transition-colors">
            <input
              type="radio"
              name="scheduleType"
              value="immediate"
              checked={scheduleType === 'immediate'}
              onChange={() => handleScheduleTypeChange('immediate')}
              className="mt-1"
            />
            <div className="flex-1">
              <div className="flex items-center space-x-2">
                <LockOpenIcon className="w-5 h-5 text-green-600" />
                <span className="font-medium text-gray-900">–ë–µ–∑–ø–ª–∞—Ç–Ω–∞ —Å—Ç–∞—Ç–∏—è</span>
              </div>
              <p className="text-sm text-gray-600 mt-1">
                –°—Ç–∞—Ç–∏—è—Ç–∞ –µ –¥–æ—Å—Ç—ä–ø–Ω–∞ –∑–∞ –≤—Å–∏—á–∫–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ –≤–µ–¥–Ω–∞–≥–∞
              </p>
            </div>
          </label>

          {/* Scheduled release */}
          <label className="flex items-start space-x-3 p-4 border rounded-lg cursor-pointer hover:bg-gray-50 transition-colors">
            <input
              type="radio"
              name="scheduleType"
              value="scheduled"
              checked={scheduleType === 'scheduled'}
              onChange={() => handleScheduleTypeChange('scheduled')}
              className="mt-1"
            />
            <div className="flex-1">
              <div className="flex items-center space-x-2">
                <ClockIcon className="w-5 h-5 text-orange-600" />
                <span className="font-medium text-gray-900">–ü–ª–∞–Ω–∏—Ä–∞–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–≤–∞–Ω–µ</span>
              </div>
              <p className="text-sm text-gray-600 mt-1">
                –ü—Ä–µ–º–∏—É–º —Å–µ–≥–∞, –Ω–æ —â–µ —Å—Ç–∞–Ω–µ –±–µ–∑–ø–ª–∞—Ç–Ω–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –º–æ–º–µ–Ω—Ç
              </p>
              
              {scheduleType === 'scheduled' && (
                <div className="mt-3 grid grid-cols-2 gap-3">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –î–∞—Ç–∞ –Ω–∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–≤–∞–Ω–µ
                    </label>
                    <div className="relative">
                      <input
                        type="date"
                        value={releaseDate}
                        onChange={(e) => {
                          setReleaseDate(e.target.value)
                          setTimeout(handleDateTimeChange, 0)
                        }}
                        className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                      />
                      <CalendarIcon className="absolute left-3 top-2.5 w-4 h-4 text-gray-400" />
                    </div>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –ß–∞—Å –Ω–∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–≤–∞–Ω–µ
                    </label>
                    <div className="relative">
                      <input
                        type="time"
                        value={releaseTime}
                        onChange={(e) => {
                          setReleaseTime(e.target.value)
                          setTimeout(handleDateTimeChange, 0)
                        }}
                        className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                      />
                      <ClockIcon className="absolute left-3 top-2.5 w-4 h-4 text-gray-400" />
                    </div>
                  </div>
                </div>
              )}
            </div>
          </label>

          {/* Permanent premium */}
          <label className="flex items-start space-x-3 p-4 border rounded-lg cursor-pointer hover:bg-gray-50 transition-colors">
            <input
              type="radio"
              name="scheduleType"
              value="permanent"
              checked={scheduleType === 'permanent'}
              onChange={() => handleScheduleTypeChange('permanent')}
              className="mt-1"
            />
            <div className="flex-1">
              <div className="flex items-center space-x-2">
                <LockClosedIcon className="w-5 h-5 text-purple-600" />
                <span className="font-medium text-gray-900">–ó–∞–≤–∏–Ω–∞–≥–∏ –ø—Ä–µ–º–∏—É–º</span>
              </div>
              <p className="text-sm text-gray-600 mt-1">
                –°—Ç–∞—Ç–∏—è—Ç–∞ –≤–∏–Ω–∞–≥–∏ —â–µ –∏–∑–∏—Å–∫–≤–∞ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—ä–ø
              </p>
            </div>
          </label>
        </div>
      </div>

      {/* Preview */}
      {isPremium && scheduleType === 'scheduled' && releaseDate && (
        <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <h4 className="font-medium text-blue-900 mb-2">
            üìÖ –ü—Ä–µ–≥–ª–µ–¥ –Ω–∞ –ø–ª–∞–Ω–∏—Ä–∞–Ω–µ—Ç–æ
          </h4>
          <div className="space-y-2 text-sm text-blue-700">
            <div className="flex items-center space-x-2">
              <span className="font-medium">–°–µ–≥–∞:</span>
              <span className="px-2 py-1 bg-orange-100 text-orange-800 rounded-full text-xs">
                –ü—Ä–µ–º–∏—É–º —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ
              </span>
            </div>
            <div className="flex items-center space-x-2">
              <span className="font-medium">–û—Ç {formatDateBG(new Date(`${releaseDate}T${releaseTime}`))}:</span>
              <span className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">
                –ë–µ–∑–ø–ª–∞—Ç–Ω–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ
              </span>
            </div>
          </div>
        </div>
      )}

      {/* Tips */}
      <div className="p-4 bg-gray-50 border border-gray-200 rounded-lg">
        <h4 className="font-medium text-gray-900 mb-2">
          üí° –°—ä–≤–µ—Ç–∏ –∑–∞ –ø—Ä–µ–º–∏—É–º —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ
        </h4>
        <ul className="text-sm text-gray-600 space-y-1">
          <li>‚Ä¢ –ü–ª–∞–Ω–∏—Ä–∞–Ω–æ—Ç–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–≤–∞–Ω–µ –µ –ø–æ–ª–µ–∑–Ω–æ –∑–∞ –ø—Ä–æ–º–æ—Ü–∏–∏ –∏ —Å—ä–±–∏—Ç–∏—è</li>
          <li>‚Ä¢ –ó–∞–≤–∏–Ω–∞–≥–∏ –ø—Ä–µ–º–∏—É–º –µ –ø–æ–¥—Ö–æ–¥—è—â–æ –∑–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ</li>
          <li>‚Ä¢ –ú–æ–∂–µ –¥–∞ –ø—Ä–æ–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏—Ç–µ –ø–æ –≤—Å—è–∫–æ –≤—Ä–µ–º–µ</li>
        </ul>
      </div>
    </div>
  )
}